// import RFM data

cd /home
mkdir segments
cd /home/segments

hadoop fs -mkdir /user/segments/
hadoop fs -put segments.csv /user/segments/

create table capstone.segments (
segment INT
id STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ',';

load data inpath '/user/segments/segments.csv'
into table capstone.segments;



create table dataMBA as
select a.id, a.transdate, a.category, a.brand, b.segment
from cleandatax a join segments b
on a.id = b.id; 

///// segmentONE - BEST CUSTOMERS

create table segmentONE as
select id, transdate, category, brand, segment,
concat(category, brand) as product,
concat(id, transdate) as transID
from dataMBA
where segment = 1;

select count(distinct id) from segmentone;

create table seg1DUMP
row format delimited
fields terminated by ','
lines terminated by '\n' as
select * from capstone.segmentONE;


///// segmentTWO - FORMER BEST CUSTOMERS

create table segmentTWO as
select id, transdate, category, brand, segment,
concat(category, brand) as product,
concat(id, transdate) as transID
from dataMBA
where segment = 2;

select count(distinct id) from segmenttwo;

create table seg2DUMP
row format delimited
fields terminated by ','
lines terminated by '\n' as
select * from capstone.segmentTWO;


///// segmentTHREE - ONE TIME BUYERS

create table segmentTHREE as
select id, transdate, category, brand, segment,
concat(category, brand) as product,
concat(id, transdate) as transID
from dataMBA
where segment = 3;

select count(distinct id) from segmentthree;

create table seg3DUMP
row format delimited
fields terminated by ','
lines terminated by '\n' as
select * from capstone.segmentTHREE;


///// segmentFOUR - NEW CUSTOMERS

create table segmentFOUR as
select id, transdate, category, brand, segment,
concat(category, brand) as product,
concat(id, transdate) as transID
from dataMBA
where segment = 4;

select count(distinct id) from segmentfour;

create table seg4DUMP
row format delimited
fields terminated by ','
lines terminated by '\n' as
select * from capstone.segmentFOUR;



setwd('\\\\files.loyalty.com/users/tmcdonald/My Documents/Big Data & Predictive Analytics/segmentONE')

seg1a <- read.csv('001a.csv', sep = ',', header = FALSE)
seg1b <- read.csv('001b.csv', sep = ',', header = FALSE)
seg1c <- read.csv('001c.csv', sep = ',', header = FALSE)
seg1d <- read.csv('001d.csv', sep = ',', header = FALSE)
seg1e <- read.csv('001e.csv', sep = ',', header = FALSE)
seg1f <- read.csv('001f.csv', sep = ',', header = FALSE)
seg1g <- read.csv('001g.csv', sep = ',', header = FALSE)
seg1h <- read.csv('001h.csv', sep = ',', header = FALSE)
seg1i <- read.csv('001i.csv', sep = ',', header = FALSE)
segmentONE <- rbind(seg1a, seg1b, seg1c, seg1d, seg1e, seg1f, seg1g, seg1h, seg1i)


setwd('\\\\files.loyalty.com/users/tmcdonald/My Documents/Big Data & Predictive Analytics/segmentTWO')

seg2a <- read.csv('002a.csv', sep = ',', header = FALSE)
seg2b <- read.csv('002b.csv', sep = ',', header = FALSE)
seg2c <- read.csv('002c.csv', sep = ',', header = FALSE)
seg2d <- read.csv('002d.csv', sep = ',', header = FALSE)
seg2e <- read.csv('002e.csv', sep = ',', header = FALSE)
seg2f <- read.csv('002f.csv', sep = ',', header = FALSE)
segmentTWO <- rbind(seg2a, seg2b, seg2c, seg2d, seg2e, seg2f)



setwd('\\\\files.loyalty.com/users/tmcdonald/My Documents/Big Data & Predictive Analytics')
segmentTEST <- read.csv('part1.csv', sep = ',', header = FALSE)

colnames(segmentTEST) = c('customer_id', 'date_of_purchase', 'category', 'brand', 'segment', 'product', 'transID')

segmentCLEAN <- unique(segmentTEST)

AggPosData <- split(segmentCLEAN$product,segmentCLEAN$transID)
head(AggPosData)

install.packages('arules')
library('arules')

Txns<-as(AggPosData,'transactions')
summary(Txns)

install.packages('arulesViz')
library('arulesViz')

itemFrequencyPlot(Txns,topN=20,type="absolute")

rules <- apriori(Txns, parameter = list(supp = 0.001, conf = 0.8))
rules<-sort(rules, by="confidence", decreasing=TRUE)
inspect(rules[1:5])

rules<-apriori(data=Txns, parameter=list(supp=0.001,conf = 0.08), 
appearance = list(default="lhs",rhs="97530"),
control = list(verbose=F))

rules<-sort(rules, by="confidence", decreasing=TRUE)

inspect(rules[1:5])

rules<-apriori(data=Txns, parameter=list(supp=0.001,conf = 0.05,minlen=2), 
appearance = list(default="rhs",lhs="97530"),
control = list(verbose=F))

rules<-sort(rules, by="confidence", decreasing=TRUE)

inspect(rules[1:5])



select product, count(*) as total
from segmentONE
group by product
order by total desc
limit 25;

select product, count(distinct transID) as total from segmentone
group by product
order by total desc
limit 25; 

select count(distinct transID) from segmenttwo; 

